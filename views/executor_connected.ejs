<!DOCTYPE html>
<html>
  <head>
    <title>Execting task</title>
    <link rel='stylesheet' href='/stylesheets/submitter_style.css' />
    <link rel='stylesheet' href='/stylesheets/submitter_connected_style.css' />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.16/peer.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
  </head>
  <body>
    <h1>Executing Task details</h1>
    <hr>
    <form>
      <label for="peer_id">Your Peer Id</label>
      <input type="text" id="peer_id" name="peer_id" value="sample-id" readonly>

      <label for="sub_peer_id">Submitter Peer Id</label>
      <input type="text" id="sub_peer_id" name="sub_peer_id" value="<%= id %>" readonly>

      <label for="task_title">Task Title</label>
      <input type="text" id="task_title" value="<%= task_title %>" name="task_title" readonly>
    </form>
    <script>

      String.prototype.hashCode = function () {
        var hash = 0;
        if (this.length == 0) {
          return hash;
        }
        for (var i = 0; i < this.length; i++) {
          var char = this.charCodeAt(i);
          hash = ((hash << 5) - hash) + char;
          hash = hash & hash; // Convert to 32bit integer
        }
        return hash;
      }

      function executorFunction(input) {
        input = JSON.parse(input);
        <%- js_function %>
      }

      function guid() {
        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000)
            .toString(10)
            .substring(1);
        }
        return s4() + s4() + s4() + '';
      }

      function createPeer() {
        var peer = new Peer(guid(), {host: '<%= ip %>', port: 9000, path: '/'});
        var peerIdText = document.getElementById("peer_id");
        peer.on('open', function () {
          peerIdText.value = peer.id;
        });
        peer.on('error', function (err) {
          alert('' + err)
        });

        var conn = peer.connect('<%= id %>');
        conn.on('open', function() {
          conn.send('ready');
          conn.on('data', function(data) {
            // Incoming JSON has the 'offset' and the 'MainInput'
            let incomingJSON = JSON.parse(data);
            let inputData = incomingJSON.MainInput;
            let offset = incomingJSON.offset;
            inputData = JSON.parse(inputData);
            inputData = inputData.Input;
            let indexArray = [];
            let resultArray = [];
            for(let i = 0; i < inputData.length; i++) {
              indexArray.push(i + offset);
              //reult of the current batch
              let result = executorFunction(JSON.stringify(inputData[i]));
              result = JSON.stringify(result);
              resultArray.push(result);
            }

            if(resultArray.length > 0) {
              hashedResultArray = [];
              for(let i = 0; i < resultArray.length; i++) {
                hashedResultArray.push(resultArray[i].hashCode());
              }
              /*
              Send these to smart contract
              console.log(indexArray);
              console.log(hashedResultArray);
              */
              // Call contract with hashedResultArray and indexArray
              // Monitor wallet balance before sending the result back

              let toSend = {result: resultArray, offset: offset};
              conn.send(JSON.stringify(toSend));
              conn.send('ready');
            }
          });
        });
      }

      window.onload = createPeer;
    </script>
  </body>
</html>